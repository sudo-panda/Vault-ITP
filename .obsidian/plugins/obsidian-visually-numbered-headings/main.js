/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.tsx
var main_exports = {};
__export(main_exports, {
  PreviewCount: () => PreviewCount,
  default: () => CountPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// src/numberGenerator.ts
var NumberGenerator = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.arr = new Array(6).fill(0);
    this.prevLvl = 0;
  }
  result(lvl) {
    return this.nextNum(lvl);
  }
  nextNum(lvl) {
    this.incrementLvl(lvl);
    if (lvl < this.prevLvl) {
      this.resetCountArrOnLevel(lvl);
    }
    const newArr = [...this.arr].slice(this.plugin.settings.countStartLvl - 1, lvl);
    this.prevLvl = lvl;
    return newArr.join(this.plugin.settings.joinSymbol) + (newArr.length !== 0 ? this.plugin.settings.endSymbol : "");
  }
  incrementLvl(lvl, increment) {
    this.arr[this.getLvlIndex(lvl)] += increment || 1;
  }
  getLvlIndex(lvl) {
    return lvl - 1;
  }
  resetCountArrOnLevel(lvl) {
    const newArr = [...this.arr];
    newArr.length = lvl;
    const res = new Array(6).fill(0);
    for (const [i, prevLvl] of newArr.entries()) {
      res[i] = prevLvl;
    }
    this.arr = res;
  }
};

// src/cmPlugin.ts
var import_language = require("@codemirror/language");
var import_state = require("@codemirror/state");
var import_view = require("@codemirror/view");
var className = "HyperMD-header_HyperMD-header-";
var CountWidget = class extends import_view.WidgetType {
  constructor(count) {
    super();
    this.count = count;
  }
  toDOM(view) {
    const div = document.createElement("span");
    div.innerText = this.count;
    div.classList.add("custom-heading-count");
    return div;
  }
};
function headingCountPlugin(plugin) {
  return import_view.ViewPlugin.fromClass(class {
    constructor(view) {
      this.decorations = this.buildDecorations(view);
    }
    update(update) {
      if (update.docChanged || update.viewportChanged) {
        this.decorations = this.buildDecorations(update.view);
      }
    }
    destroy() {
    }
    buildDecorations(view) {
      const builder = new import_state.RangeSetBuilder();
      const numGen = new NumberGenerator(plugin);
      (0, import_language.syntaxTree)(view.state).iterate({
        enter(node) {
          const nodeName = node.type.name;
          if (nodeName.startsWith(className)) {
            const hRef = node;
            const hLevel = Number(nodeName.split(className)[1]);
            builder.add(hRef.from, hRef.from, import_view.Decoration.widget({
              widget: new CountWidget(numGen.nextNum(hLevel))
            }));
          }
        }
      });
      return builder.finish();
    }
  }, { decorations: (v) => v.decorations });
}
function cmPlugin(plugin) {
  const baseTheme = import_view.EditorView.baseTheme({
    ".custom-heading-count": {
      opacity: 0.5
    }
  });
  return [baseTheme, headingCountPlugin(plugin)];
}

// src/settings.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  joinSymbol: ".",
  endSymbol: ". ",
  countStartLvl: 1
};
var SettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Join symbol").setDesc("Symbol used between numbers").addText((text) => text.setPlaceholder(".").setValue(this.plugin.settings.joinSymbol).onChange(async (value) => {
      await this.plugin.updateSettings({ joinSymbol: value });
    }));
    new import_obsidian.Setting(containerEl).setName("Ending symbol").setDesc("Symbol after the counter").addText((text) => text.setPlaceholder(". ").setValue(this.plugin.settings.endSymbol).onChange(async (value) => {
      await this.plugin.updateSettings({ endSymbol: value });
    }));
    new import_obsidian.Setting(containerEl).setName("Starting level").setDesc("Which heading level to start counting from").addDropdown((el) => {
      el.addOptions({
        "1": "1",
        "2": "2",
        "3": "3",
        "4": "4",
        "5": "5",
        "6": "6"
      }).onChange(async (value) => {
        await this.plugin.updateSettings({
          countStartLvl: Number(value)
        });
      });
    });
  }
};

// src/main.tsx
var import_obsidian3 = require("obsidian");

// src/cache.ts
var Cache = class {
  constructor() {
    this.items = /* @__PURE__ */ new Map();
    this.set = (key, value) => {
      this.items.set(key, value);
    };
    this.get = (key) => {
      return this.items.get(key);
    };
    this.delete = (key) => {
      return this.items.delete(key);
    };
    this.clearAll = () => {
      for (const [key] of this.items.entries()) {
        this.delete(key);
      }
    };
    this.exists = (key) => {
      return this.items.has(key);
    };
  }
};

// src/main.tsx
var CountPlugin = class extends import_obsidian2.Plugin {
  constructor() {
    super(...arguments);
    this.mdNumGenCache = new Cache();
    this.isInitialLoad = true;
    this.resetCache = (0, import_obsidian2.debounce)(() => {
      this.mdNumGenCache.clearAll();
    }, 1e3, true);
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new SettingTab(this.app, this));
    this.updateRefreshSettings();
    this.registerEditorExtension(cmPlugin(this));
    this.registerEvent(this.app.workspace.on("editor-change", (file, mdView) => {
      mdView.previewMode.rerender(true);
    }));
    this.registerEvent(this.app.metadataCache.on("changed", () => {
      this.resetCache();
    }));
    this.registerMarkdownPostProcessor((element, context) => {
      const headings = element.querySelectorAll("h1,h2,h3,h4,h5,h6");
      const docId = context.docId;
      if (!this.mdNumGenCache.exists(docId)) {
        const numGen2 = new NumberGenerator(this);
        this.mdNumGenCache.set(docId, numGen2);
      }
      const numGen = this.mdNumGenCache.get(docId);
      for (const [, h] of headings.entries()) {
        const lastChild = headings.item(headings.length - 1);
        const hLvl = Number(lastChild.tagName[1]);
        if (!lastChild)
          continue;
        const num = numGen == null ? void 0 : numGen.nextNum(hLvl);
        context.addChild(new PreviewCount(h, num));
      }
    }, 10);
  }
  async loadSettings() {
    var _a;
    this.settings = Object.assign({}, DEFAULT_SETTINGS, (_a = await this.loadData()) != null ? _a : {});
  }
  async updateSettings(settings) {
    Object.assign(this.settings, settings);
    await this.saveData(this.settings);
    this.updateRefreshSettings();
  }
  updateRefreshSettings() {
    this.app.workspace.updateOptions();
  }
};
var PreviewCount = class extends import_obsidian3.MarkdownRenderChild {
  constructor(containerEl, text) {
    super(containerEl);
    this.text = text;
  }
  onload() {
    this.containerEl.createSpan({
      text: this.text,
      prepend: true,
      cls: "custom-heading-count"
    });
  }
};
